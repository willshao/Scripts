#=======================================================================
#      Microsoft provides programming examples for illustration only, 
#      without warranty either expressed or implied, including, but 
#      not limited to, the implied warranties of merchantability 
#      and/or fitness for a particular purpose. It is assumed 
#      that you are familiar with the programming language being 
#      demonstrated and the tools used to create and debug procedures. 
#      Microsoft support professionals can help explain the functionality 
#      of a particular procedure, but they will not modify these examples 
#      to provide added functionality or construct procedures to meet your 
#      specific needs. If you have limited programming experience, you may 
#      want to contact a Microsoft Certified Partner or the Microsoft fee-based 
#      consulting line at (800) 936-5200. For more information about Microsoft 
#      Certified Partners, please visit the following Microsoft Web site: 
#      http://www.microsoft.com/partner/referral/
#
#========================= Start of the script =========================

function CompareFolderPerm{
param(
  [string]$folder1,
  [string]$folder2 
  )

    $checkedRights="FullControl;Modify, Synchronize;ReadAndExecute, Synchronize;Read, Synchronize;Write, Synchronize"

    $comparerulefortwofolders="FullControl+Modify, Synchronize-Modify, Synchronize;ReadAndExecute, Synchronize-ReadAndExecute, Synchronize;ListFolderContents-ListFolderContents;Read, Synchronize-Read, Synchronize;Write, Synchronize-Write, Synchronize"

    $excludegroups="system,administrators"

    $file_output="c:\itm\outputList.txt"

    #if(Test-Path $file_output){
    #    Remove-Item $file_output
    #}


    (Get-Date).ToString('hh:mm:ss tt')+ `
    ": Start to compare folder:" + $folder1+" and folder:" +$folder2>>$file_output


    $ret=GetFolderPerm -folder $folder1 -checkedRights $checkedRights -excludegroups $excludegroups -compareRules $comparerulefortwofolders
    (Get-Date).ToString('hh:mm:ss tt')+ `
    ": Totally users of 1st folder:" + $ret.Count>>$file_output
    $ret2=GetFolderPerm -folder $folder2 -checkedRights $checkedRights -excludegroups $excludegroups -compareRules $comparerulefortwofolders
    (Get-Date).ToString('hh:mm:ss tt')+ `
    ": Totally users of 2st folder:" + $ret2.Count>>$file_output
    

    foreach ($rule in $comparerulefortwofolders.Split(";")){
         
        #Compare folder1 with folder2 and find those members that exist in Folder1 but not exist in Folder2
        
        $differentmeb1=@()
        $differentmeb2=@()


        "============ Rule: "+ $rule+" ============">>$file_output
        #"Members that in " + $folder1 + ",but no in " + $folder2>>$file_output
        #"Members that in the 1st folder, but not in 2nd folder">>$file_output
        $differentmeb1=CompareFolderPermSub -folderpermlist1 $ret -folderpermlist2 $ret2 -comparerule $rule -outputfile $file_output -reverserule $false

        #Compare folder2 with folder1 and find those members that exist in Folder2 but not exist in Folder1
        #"Members that in " + $folder2 + ",but no in " + $folder1>>$file_output
        #"Members that in the 2nd folder, but not in 1st folder">>$file_output
        $differentmeb2=CompareFolderPermSub -folderpermlist1 $ret2 -folderpermlist2 $ret -comparerule $rule -outputfile $file_output -reverserule $true

        if ($differentmeb1.Count -eq 0 -and $differentmeb2.Count -eq 0){
            "No different members for these two folders">>$file_output
        } else{
            "****** Summary ******">>$file_output
            "Totally " + ($differentmeb1.Count+$differentmeb2.Count).ToString()  + " different members">>$file_output
            foreach ($mem in $differentmeb1){
                "SamAccountName:" +$mem.SamAccountName + ". DistinguishedName:" + $mem.distinguishedname >>$file_output
            }
            foreach ($mem in $differentmeb2){
                 "SamAccountName:" +$mem.SamAccountName + ". DistinguishedName:" + $mem.distinguishedname >>$file_output
            }


            "****** Details ******">>$file_output
            $differentmeb1.Count.ToString()+" members in the 1st folder, but not in 2nd folder">>$file_output
            if ($differentmeb1.Count -ne 0){
                foreach ($mem in $differentmeb1){
                     "SamAccountName:" +$mem.SamAccountName + ". DistinguishedName:" + $mem.distinguishedname >>$file_output
                }
            }

            $differentmeb2.Count.ToString()+" members in the 2nd folder, but not in 1st folder">>$file_output
            if ($differentmeb2.Count -ne 0){
                foreach ($mem in $differentmeb2){
                     "SamAccountName:" +$mem.SamAccountName + ". DistinguishedName:" + $mem.distinguishedname >>$file_output
                }
            }
           }

           #Add new line for each rule
           "`n">>$file_output
    }


    (Get-Date).ToString('hh:mm:ss tt')+ ": Finish compare">>$file_output
    "`n">>$file_output
    "`n">>$file_output
    "`n">>$file_output
  }


  function CompareFolderPermSub{
  param(
  [System.Object[]]$folderpermlist1,
  [System.Object[]]$folderpermlist2,
  [String]$comparerule,
  [String]$outputfile,
  [bool]$reverserule
  )

    $rulefrom=$comparerule.Split("-")[0]
    $ruleto=$comparerule.Split("-")[1]


    if ($reverserule){
        $rulefrom=$comparerule.Split("-")[1]
        $ruleto=$comparerule.Split("-")[0]
    }

    $ret=@()

    foreach ($folderperm1 in $folderpermlist1){
        if ($rulefrom.IndexOf($folderperm1.FileSystemRights.ToString()) -ge 0){
            $samememberwithsamerights=$false
            foreach ($folderperm2 in $folderpermlist2){
            if ($ruleto.IndexOf($folderperm2.FileSystemRights.ToString()) -ge 0){
                if ($folderperm1.distinguishedname -eq $folderperm2.distinguishedname){
                    $samememberwithsamerights=$true
                    break
                }
               }
            }

            if ($samememberwithsamerights -eq $false){
                $retitem=New-Object System.Object
                $retitem | Add-Member -type NoteProperty -name "distinguishedname" -Value $folderperm1.distinguishedname
                $retitem | Add-Member -type NoteProperty -name "SamAccountName" -Value $folderperm1.SamAccountName
                $ret+=$retitem
           }
        }
    }
    return $ret
  }


  function GetFolderPerm{
  param(
  [string]$folder,
  [string]$checkedRights,
  [string]$excludegroups,
  [string]$compareRules
  )
    

      #Get ACL
      $folerpermlist=Get-Acl $folder

     $folderaccessObjlist=@()

      $objForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
      $DomainList = @($objForest.Domains | Select-Object Name)

      $domaininfo=Get-ADDomain
              
        $currentdomaindnsroot=$domaininfo.DNSRoot
        $cuurentdomainDN=$domaininfo.DistinguishedName
        $currentdomainNetBIOSName=$domaininfo.NetBIOSName

      foreach($folderaccess in $folerpermlist.Access){
      if ($checkedRights.IndexOf($folderaccess.FileSystemRights.ToString()) -ge 0){
        
        ##Get AD group members
       
        $domain=""
        if ($folderaccess.IdentityReference.ToString().Indexof("\") -gt 0)
        {$domain=$folderaccess.IdentityReference.ToString().SubString(0,$folderaccess.IdentityReference.ToString().Indexof("\"))}
        $identityname=$folderaccess.IdentityReference.ToString().SubString($folderaccess.IdentityReference.ToString().Indexof("\")+1)


        if ($folderaccess.IdentityReference.ToString().Contains("BUILTIN") -eq $false `
        -and $folderaccess.IdentityReference.ToString().Contains("NT AUTHORITY") -eq $false `
        -and $folderaccess.IdentityReference.ToString().ToLower().Contains("a133_a_0001") -eq $false `
        -and $excludegroups.IndexOf($identityname) -lt 0 `
        -and $excludegroups.ToLower().IndexOf($folderaccess.IdentityReference.ToString().ToLower()) -lt 0
        ){


            $members=@()

             #Get server for each identify
            $domainServerName=""
            $blnFound=$false
            foreach ($tempdomain in $DomainList)
            {
                $arr=$tempdomain.Name.Split(".")
                $blnFound=$false
                if ($arr.Count -gt 0 -and $arr[0] -eq $domain)
                {
                    $blnFound=$true
                    $domainServerName=$tempdomain.Name
                    break
                }
            }

            if ($blnFound -eq $false)
            {
                $members=Get-ADUser $identityname
            }
            else
            {
                $members=Get-ADUser -Filter {samaccountname -eq $identityname} -Server $domainServerName

                if ($members.Count -le 0)
                {
                    $members=@()
                    $dn=Get-ADGroup -Filter {samaccountname -eq $identityname} -Server $domainServerName


                    if ($dn -ne $null)
                    {
                        $members=Get-ADGroupMember -Identity $dn -Recursive
                        <#
                        #$members=Get-ADGroupMember -Identity $identityname -Recursive
                        #Get-ADGroupMember has an issue that cannot get identify from other domains
                        #So use dsget instead
                        $membersandgroups=dsquery group $dn | dsget group -members -expand
                
                        foreach ($temp in $membersandgroups)
                        {
                            if (-not ([string]::IsNullOrEmpty($temp)))
                            {
                                #The $temp value is like "CN=GroupTest2,CN=Users,DC=TFSTRAIN,DC=COM".
                                #need to remove " at the begining and at the ending
                                $temp=$temp.Substring(1,$temp.Length-2)

                                #Get server from DN
                                #DN example:CN=Michael Wang,OU=OU1,DC=TFSTRAIN,DC=COM
                                #Server example: TFSTRAIN.COM
                                $server=$temp.substring($temp.indexof(",DC=")).replace(",DC=",".").substring(1)

                                $member=Get-ADObject $temp -server $domainServerName
                                if ($member.ObjectClass -eq "user")
                                {
                                    $members+=$member
                                } 
                            }
                        }
                        #>
                    }
                }
            }
            
            
 

            
            foreach($groupmember in $members){
                $folderaccessObj=New-Object System.Object

                 #Below logic handle List folder contents and Read & Execute permissions.
                 #List folder contents:Permits viewing and listing of files and subfolders as well as executing of files; inherited by folders only
                 #Read & Execute:Permits viewing and listing of files and subfolders as well as executing of files; inherited by files and folders
                 #More details please refer: https://msdn.microsoft.com/en-us/library/bb727008.aspx
               if ($compareRules.Contains("ListFolderContents") `
               -and $folderaccess.FileSystemRights.ToString() -eq "ReadAndExecute, Synchronize"){
                    if ($folderaccess.InheritanceFlags.ToString() -eq "ContainerInherit, ObjectInherit" `
                    -or $folderaccess.InheritanceFlags.ToString() -eq "ObjectInherit, ContainerInherit"){
                        $folderaccessObj | Add-Member -type NoteProperty -name "FileSystemRights" -Value $folderaccess.FileSystemRights
                    }
                    else{
                        $folderaccessObj | Add-Member -type NoteProperty -name "FileSystemRights" -Value "ListFolderContents"
                    }
               } else{
                    $folderaccessObj | Add-Member -type NoteProperty -name "FileSystemRights" -Value $folderaccess.FileSystemRights
               }

                #$folderaccessObj | Add-Member -type NoteProperty -name "FileSystemRights" -Value $folderaccess.FileSystemRights
                $folderaccessObj | Add-Member -type NoteProperty -name "distinguishedname" -Value $groupmember.distinguishedname
                $folderaccessObj | Add-Member -type NoteProperty -name "SamAccountName" -Value $groupmember.SamAccountName
                $folderaccessObj | Add-Member -type NoteProperty -name "InheritanceFlags" -Value $folderaccess.InheritanceFlags
                $folderaccessObjlist+=$folderaccessObj
            }
        }
       }
      }
      return $folderaccessObjlist
  }


  function GetChildItemByDepth{
  param(
  [int]$StartLevel,# 0 = include base folder, 1 = sub-folders only, 2 = start at 2nd level
  [int]$Depth,# How many levels deep to scan
  [string]$Path# starting path
  )

    For ($i=$StartLevel; $i -le $Depth; $i++) {
        $Levels = "\*" * $i
        (Resolve-Path $Path$Levels).ProviderPath | Get-Item | Where PsIsContainer |
        Select FullName
    }
  }


  function Main{
param(
  [string]$folder1,
  [string]$folder2,
  [int]$depth# 0 = only get root folder, 1 = get root folder and the subfoler under root folder, 2 = get root folder, 1st level subfolder and 2nd level subfolder
  )

  $folderlist1=GetChildItemByDepth -StartLevel 0 -Depth $depth -Path $folder1 | Sort-Object -Property FullName
  $folderlist2=GetChildItemByDepth -StartLevel 0 -Depth $depth -Path $folder2
  foreach ($folderx in $folderlist1){
    $relativefolderxname=$folderx.FullName.SubString($folder1.Length)
    foreach ($foldery in $folderlist2){
        $relativefolderyname=$foldery.FullName.SubString($folder2.Length)
        if ($relativefolderxname.ToUpper() -eq $relativefolderyname.ToUpper()){
            CompareFolderPerm -folder1 $folderx.FullName -folder2 $foldery.FullName
            break
        }
    }
  }
  }



  function CompareFolderPermViaCSV ([String]$csvfilepath){
 
    #log file path
    $file_output="c:\itm\outputList.txt"

    if(Test-Path $file_output){
        Remove-Item $file_output
    }

    $paras = Import-CSV $csvfilepath -Encoding Default

    foreach ($para in $paras) {
        #try
        #{
            "########################################################################################">>$file_output
            (Get-Date).ToString('hh:mm:ss tt')+ ": Folder1:" + $para.Folder1>>$file_output
            (Get-Date).ToString('hh:mm:ss tt')+ ": Folder2:" + $para.Folder2>>$file_output
            (Get-Date).ToString('hh:mm:ss tt')+ ": Depth:" + $para.Depth>>$file_output
            "########################################################################################">>$file_output
             Main -folder1 $para.Folder1 -folder2 $para.Folder2 -depth $para.Depth
             "`n">>$file_output
            "`n">>$file_output

        #}
        #catch
        #{
        #    Write-Host $Error[0] -ForegroundColor Red
        #    $Error[0]>>$file_output
        #}
    }
}



CompareFolderPermViaCSV -csvfilepath "C:\Temp\CompareList.csv"
