


Invoke-Command  -ScriptBlock { cmd /c systeminfo.exe>.\SystemInfo.txt} 

function Get_IE{
$array =@() 
$keyname = 'SOFTWARE\\Microsoft\\Internet Explorer' 
$server=$env:computername
$reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $server) 
$key = $reg.OpenSubkey($keyname) 
$value = $key.GetValue('Version') 
 $obj = New-Object PSObject 
         
        $obj | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $server 
         
        $obj | Add-Member -MemberType NoteProperty -Name "IEVersion" -Value $value 
 
        $array += $obj  
 
 

$array | select ComputerName,IEVersion | export-csv IE_Version.csv -NoTypeInformation -encoding UTF8
}
Get_IE

Function Get-PendingUpdate { 
    <#    
      .DESCRIPTION   
        Retrieves the updates waiting to be installed from WSUS  
      .EXAMPLE   
       Get-PendingUpdates                                       
                                        
    #> 
      
    #Requires -version 3.0   
    [CmdletBinding( 
       
        )] 
    param( 
        [Parameter(ValueFromPipeline = $True)] 
            [string]$fileName = "UpdateToInstall.csv"
        )     
    Process { 

                Try { 
                #Create Session COM object 
                    Write-Verbose "Creating COM object for WSUS Session" 
                    $updatesession =  [activator]::CreateInstance([type]::GetTypeFromProgID("Microsoft.Update.Session",$computer)) 
                    } 
                Catch { 
                    Write-Warning "$($Error[0])" 
                    Break 
                    } 
 
                #Configure Session COM Object 
                Write-Verbose "Creating COM object for WSUS update Search" 
                $updatesearcher = $updatesession.CreateUpdateSearcher() 
 
                #Configure Searcher object to look for Updates awaiting installation 
                Write-Verbose "Searching for WSUS updates on client" 
                $searchresult = $updatesearcher.Search("IsInstalled=0")     
             
                #Verify if Updates need installed 
                Write-Verbose "Verifing that updates are available to install" 
                If ($searchresult.Updates.Count -gt 0) { 
                    #Updates are waiting to be installed 
                    Write-Verbose "Found $($searchresult.Updates.Count) update\s!" 
                    #Cache the count to make the For loop run faster 
                    $count = $searchresult.Updates.Count 
                 
                    #Begin iterating through Updates available for installation 
                    Write-Verbose "Iterating through list of updates" 
                    $objs=@()
                    For ($i=0; $i -lt $Count; $i++) { 
                        #Create object holding update 
                        $Update = $searchresult.Updates.Item($i)
                        
                        $obj=New-Object psobject -Property @{
                            Computername = $Computer
                            Title = $Update.Title
                            KB = $($Update.KBArticleIDs)
                            SecurityBulletin = $($Update.SecurityBulletinIDs)
                            MsrcSeverity = $Update.MsrcSeverity
                            IsDownloaded = $Update.IsDownloaded
                            Url = $($Update.MoreInfoUrls)
                            Categories = (($Update.Categories | Select-Object -ExpandProperty Name) -join ';')

                        } 
                       
                       $Objs += $Obj
                    }
                } 
                Else { 
                    #Nothing to install at this time 
                    Write-Verbose "No updates to install." 
                }

              $count=$count+1
                if ($objs){
                $objs|Select-Object Title,KB,SecurityBulletin,MsrcSeverity,IsDownloaded,Url,Categories | Export-Csv -Path $fileName -NoTypeInformation -encoding UTF8
               
                }
                else{
                  
                   ""|Select-Object Title,KB,SecurityBulletin,MsrcSeverity,IsDownloaded,Url,Categories | Export-Csv -Path $fileName -NoTypeInformation -encoding UTF8
                    
                }
        }
    }

Get-PendingUpdate 



function FindInstalledAppInfo
{
    
    [CmdletBinding()]
    Param
    (
        # Param input
        [Parameter(Mandatory=$true)]
        [ValidateNotNull()]
        [ValidateNotNullOrEmpty()]
        $fileName
    )
   
    Begin
    {
      # Write-host "Start the retrieve."
    }
    Process
    {
        # Get the local computerName and current user account
        $ComputerName=$env:computername
    
        $Username=$env:UserName

        #Write-host " $fileName "
        $Objs = @()
        # Retrieve the Inatalled Application through the registry
        try{
        $RegKey = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
        $RegKey1 ="HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
        if(test-path $RegKey)
        {
            $InstalledAppsInfos = Get-ItemProperty -Path $RegKey
        }
        if(test-path $RegKey1){
            $InstalledAppsInfos1 = Get-ItemProperty -Path $RegKey1
        }
           }
        catch{
            $objCSV=New-object -TypeName PSObject -Property @{'Username'=$Username
                                                        'IPAddress'=$IP
                                                        'MAC'=$MAC
                                                        'AppName'=""
                                                        'Version'=""
                                                        'InstallDate'=""
                                                        'Vendor'=""
                                                       }
           $objCSV|Select-Object AppName,Version | Export-Csv -Path $fileName -NoTypeInformation -encoding UTF8
            Return
        }
        
        if($InstalledAppsInfos){
            Foreach($InstalledAppsInfo in $InstalledAppsInfos)
            {
        
                $Obj = [PSCustomObject]@{
                                         DisplayName = $InstalledAppsInfo.DisplayName;
                                         DisplayVersion = $InstalledAppsInfo.DisplayVersion;
								         InstallDate = $InstalledAppsInfo.InstallDate;
                                         Publisher = $InstalledAppsInfo.Publisher}
                $Objs += $Obj
       
            }
         }
         if($InstalledAppsInfos1){
             Foreach($InstalledAppsInfo in $InstalledAppsInfos1)
            {
        
                $Obj = [PSCustomObject]@{
                                         DisplayName = $InstalledAppsInfo.DisplayName;
                                         DisplayVersion = $InstalledAppsInfo.DisplayVersion;
								         InstallDate = $InstalledAppsInfo.InstallDate;
                                         Publisher = $InstalledAppsInfo.Publisher}
                $Objs += $Obj
       
            }
         }
        $objList=$Objs | Where-Object { $_.DisplayName } 
        $objCSVs = @()
        $count=0
        foreach ($item in $objList ){
              $count=$count+1
          
              if($Count -eq 1){
                     $objCSV=New-object -TypeName PSObject -Property @{'Username'=$Username
                                                        'IPAddress'=$IP
                                                        'MAC'=$MAC
                                                        'AppName'=$item.DisplayName
                                                        'Version'=$item.DisplayVersion
                                                        'InstallDate'=$item.InstallDate
                                                        'Vendor'=$item.Publisher
                                                       }
                
                }
                else
                {
                   $objCSV=New-object -TypeName PSObject -Property @{'Username'=""
                                                        'IPAddress'=""
                                                        'MAC'=""
                                                        'AppName'=$item.DisplayName
                                                        'Version'=$item.DisplayVersion
                                                        'InstallDate'=$item.InstallDate
                                                        'Vendor'=$item.Publisher
                                                       }
                }
                $objCSVs +=$objCSV

        }
        
        if ($objCSVs){
            $objCSVs|Select-Object AppName,Version| Export-Csv -Path $fileName -NoTypeInformation -encoding UTF8
           
        }
        else{
           $objCSV=New-object -TypeName PSObject -Property @{'Username'=$Username
                                                        'IPAddress'=$IP
                                                        'MAC'=$MAC
                                                        'AppName'=""
                                                        'Version'=""
                                                        'InstallDate'=""
                                                        'Vendor'=""
                                                       }
           $objCSV|Select-Object AppName,Version| Export-Csv -Path $fileName -NoTypeInformation -encoding UTF8
            
        }
    }
    End
    {
       #Write-host "We have completed the search.:)"
    }
}
FindInstalledAppInfo -fileName "InstalledAppInfo.csv"



